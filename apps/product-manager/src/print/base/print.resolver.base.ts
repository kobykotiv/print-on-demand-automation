/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePrintArgs } from "./CreatePrintArgs";
import { UpdatePrintArgs } from "./UpdatePrintArgs";
import { DeletePrintArgs } from "./DeletePrintArgs";
import { PrintCountArgs } from "./PrintCountArgs";
import { PrintFindManyArgs } from "./PrintFindManyArgs";
import { PrintFindUniqueArgs } from "./PrintFindUniqueArgs";
import { Print } from "./Print";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { PrintService } from "../print.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Print)
export class PrintResolverBase {
  constructor(
    protected readonly service: PrintService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Print",
    action: "read",
    possession: "any",
  })
  async _printsMeta(
    @graphql.Args() args: PrintCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Print])
  @nestAccessControl.UseRoles({
    resource: "Print",
    action: "read",
    possession: "any",
  })
  async prints(@graphql.Args() args: PrintFindManyArgs): Promise<Print[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Print, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Print",
    action: "read",
    possession: "own",
  })
  async print(
    @graphql.Args() args: PrintFindUniqueArgs
  ): Promise<Print | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Print)
  @nestAccessControl.UseRoles({
    resource: "Print",
    action: "create",
    possession: "any",
  })
  async createPrint(@graphql.Args() args: CreatePrintArgs): Promise<Print> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Print)
  @nestAccessControl.UseRoles({
    resource: "Print",
    action: "update",
    possession: "any",
  })
  async updatePrint(
    @graphql.Args() args: UpdatePrintArgs
  ): Promise<Print | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Print)
  @nestAccessControl.UseRoles({
    resource: "Print",
    action: "delete",
    possession: "any",
  })
  async deletePrint(
    @graphql.Args() args: DeletePrintArgs
  ): Promise<Print | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Product], { name: "products" })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async resolveFieldProducts(
    @graphql.Parent() parent: Print,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProducts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
